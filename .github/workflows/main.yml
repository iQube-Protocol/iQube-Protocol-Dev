name: iQube Protocol CI/CD Pipeline

on:
  push:
    branches: 
      - development
      - staging
      - main
  pull_request:
    branches: 
      - development
      - staging
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'
    - name: Install Dependencies
      run: |
        npm install
        npm run prepare
    - name: Run Linter
      run: npm run lint
    - name: Run Unit Tests
      run: npm run test
    - name: Run Type Checks
      run: npm run typecheck

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'
    - name: Install Dependencies
      run: npm install
    - name: Setup Environment
      run: |
        if [ "${{ github.ref }}" = "refs/heads/staging" ]; then
          echo "Using staging environment"
          cp .env.staging .env
        elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "Using production environment"
          cp .env.production .env
        else
          echo "Using development environment"
          cp .env.development .env
        fi
    - name: Build Project
      run: |
        if [ "${{ github.ref }}" = "refs/heads/staging" ]; then
          npm run build:staging
        else
          npm run build
        fi
    - name: Archive Build
      uses: actions/upload-artifact@v3
      with:
        name: build
        path: dist

  deploy:
    needs: build
    if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    steps:
    - uses: actions/checkout@v3
    - name: Download Build
      uses: actions/download-artifact@v3
      with:
        name: build
        path: ./dist
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: Deploy to S3
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          aws s3 sync ./dist s3://${{ secrets.PRODUCTION_BUCKET_NAME }} --delete
          aws cloudfront create-invalidation --distribution-id ${{ secrets.PRODUCTION_DISTRIBUTION_ID }} --paths "/*"
        else
          aws s3 sync ./dist s3://${{ secrets.STAGING_BUCKET_NAME }} --delete
          aws cloudfront create-invalidation --distribution-id ${{ secrets.STAGING_DISTRIBUTION_ID }} --paths "/*"
        fi
