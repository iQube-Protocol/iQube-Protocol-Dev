name: iQube Protocol CI/CD Pipeline

on:
  push:
    branches: 
      - development
      - staging
      - main
  pull_request:
    branches: 
      - development
      - staging
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'
    - name: Install Dependencies
      run: |
        npm install
        npm run prepare
    - name: Run Linter
      run: npm run lint
    - name: Run Unit Tests
      run: npm run test
    - name: Run Type Checks
      run: npm run typecheck

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'
    - name: Install Dependencies
      run: npm install
    - name: Setup Environment
      run: |
        if [ "${{ github.ref }}" = "refs/heads/staging" ]; then
          echo "Using staging environment"
          cp .env.staging .env
        elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "Using production environment"
          cp .env.production .env
        else
          echo "Using development environment"
          cp .env.development .env
        fi
    - name: Build Project
      run: |
        if [ "${{ github.ref }}" = "refs/heads/staging" ]; then
          npm run build:staging
        else
          npm run build
        fi
    - name: Archive Build
      uses: actions/upload-artifact@v3
      with:
        name: build
        path: dist

  deploy-staging:
    needs: build
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    environment: staging
    steps:
    - uses: actions/checkout@v3
    - name: Download Build
      uses: actions/download-artifact@v3
      with:
        name: build
        path: ./dist
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    - name: Deploy to DigitalOcean Droplet
      env:
        PRIVATE_KEY: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}
        HOST: ${{ secrets.STAGING_HOST }}
        USERNAME: ${{ secrets.STAGING_USERNAME }}
      run: |
        echo "$PRIVATE_KEY" > private_key
        chmod 600 private_key
        rsync -avz -e "ssh -i private_key -o StrictHostKeyChecking=no" \
          --delete ./dist/ \
          $USERNAME@$HOST:/var/www/staging.iqube.network/
        rm -f private_key

  deploy-production:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
    - uses: actions/checkout@v3
    - name: Download Build
      uses: actions/download-artifact@v3
      with:
        name: build
        path: ./dist
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    - name: Deploy to DigitalOcean Droplet
      env:
        PRIVATE_KEY: ${{ secrets.PRODUCTION_SSH_PRIVATE_KEY }}
        HOST: ${{ secrets.PRODUCTION_HOST }}
        USERNAME: ${{ secrets.PRODUCTION_USERNAME }}
      run: |
        echo "$PRIVATE_KEY" > private_key
        chmod 600 private_key
        rsync -avz -e "ssh -i private_key -o StrictHostKeyChecking=no" \
          --delete ./dist/ \
          $USERNAME@$HOST:/var/www/iqube.network/
        rm -f private_key
